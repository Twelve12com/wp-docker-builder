#!/bin/bash
source global.sh




# Get data from local.env file
source local.env

DEFAULT_PLUGINS=$PLUGINS


# Get data from .env file
if [[ -f .env ]]; then

	source .env

fi




# Builder updates
self_update




# CHECK THE PROJECT STATUS

# OPTION 1
# Install the starter theme with Flexible Grid System
MODE=install-starter
# 1. Check IP and Create Host *
# 2. Prepare the starter template *
# 3. Build the server *
# 4. Install the NPM packages and build the style.css file *
# 5. Do the WP job *
# 6. Print the site info *
# 7. Print the Username & Pass *
# 8. Run the GULP *



# OPTION 2
# Install from a git repo
if [[ $1 == --remote ]]; then

	MODE=install-remote

fi



# OPTION 3
# Import an existing site
if [[ $1 == --import ]] || [[ -d site/import/ ]]; then

	MODE=import-existing-site

fi



# OPTION 4
# Install existing site (If already uninstalled)
if [[ -f site/database/dump/wordpress_data.sql ]] || [[ -d site/database/mysql/ ]]; then


	MODE=install-existing-site
	# 1. Check IP and Create Host *
	# 2. Build the server *
	# 3. URL replace on DB *
	# 4. Print the site info *


fi


# If local IP already changed on .env file
if [[ $IP != 127.0.0.1 ]] && [[ -f .env ]]; then

	MODE=already-installed
	# 1. Start the servers

fi


echo "INSTALLATION MODE: $MODE"
echo ""




# INSTALL FROM GIT REPO
if [[ $MODE == install-remote ]]; then


	read -ep "Remote project name (site-name): " GIT
	[[ ! -z "$GIT" ]] && sleep 0 || (echo "Empty name" && exit)


	# Test the git URL
	if git ls-remote "https://twelve12com@bitbucket.org/twelve12com/${GIT}.git" HEAD &>/dev/null; then
		echo "Repository found."
	else
		echo "Remote repository not found."
		exit
	fi


	# Delete the existing site folder
	rm -rf site/
	echo -e "Existing 'site' folder removed ... ${GREEN}done${RESET}"


	# Clone the repo
	git clone "https://twelve12com@bitbucket.org/twelve12com/${GIT}.git" site/
	echo -e "Git clone ... ${GREEN}done${RESET}"


	# Update the permissions
	permission_update site/


fi




# IMPORT AN EXISTING SITE
if [[ $MODE == import-existing-site ]]; then


	# Move import files
	move_import_files


fi




# CONFIRM THE SITE INFO
# Confirm the environment information if .env file not exists
if [[ ! -f .env ]]; then



	# Use the existing site .env file
	if [[ -f site/.env ]]; then

		source site/.env

	fi



	# Confirm the local domain name
	if [[ $MODE != install-remote ]] && [[ $MODE != import-existing-site ]]; then
		
		read -ep "Domain Name (${DOMAIN}): " domain

	else

		domain=""

	fi
	[[ ! -z "$domain" ]] && DOMAIN=$domain || echo "Using '${DOMAIN}'"



	# CHECK THE LOCAL DOMAIN AVAILABILITY
	echo "Checking '${DOMAIN}' availability..."
	if grep -q "${DOMAIN}" /etc/hosts; then
		echo -e "${RED}'${DOMAIN}' Host has already been added. Please remove it before installing.${RESET}"
		exit
	fi
	echo -e "${GREEN}${DOMAIN}${RESET} - AVAILABLE"



	# When installing starter or importing an existing site
	if [[ $MODE == install-starter ]] || [[ $MODE == import-existing-site ]]; then

		if [[ $MODE == import-existing-site ]]; then
			read -ep "Active theme folder name (${SLUG}): " slug
		else
			read -ep "Project Name (${SLUG}): " slug
		fi
		[[ ! -z "$slug" ]] && SLUG=$slug || echo "Using '${SLUG}'"


		read -ep "Short Name (${PREFIX}): " prefix
		[[ ! -z "$prefix" ]] && PREFIX=$prefix || echo "Using '${PREFIX}'"

	fi



	# Ask other info when creating website from scratch
	if [[ $MODE == install-starter ]]; then


		read -ep "Website Name (${NAME}): " name
		[[ ! -z "$name" ]] && NAME=$name || echo "Using '${NAME}'"


		read -ep "Website Tagline (${DESC}): " desc
		[[ ! -z "$desc" ]] && DESC=$desc || echo "Using '${DESC}'"


		read -ep "Plugins that need to be installed (${PLUGINS}): " plugins
		[[ ! -z "$plugins" ]] && PLUGINS=$plugins || echo "Using '${PLUGINS}'"


		# Ask for the admin info
		read -ep "Developer Email (${DEVELOPER_EMAIL}): " developer_email
		[[ ! -z "$developer_email" ]] && DEVELOPER_EMAIL=$developer_email || echo "Using '${DEVELOPER_EMAIL}'"



		if [[ $DEVELOPER_EMAIL != webdesign@twelve12.com ]]; then


			read -ep "Developer Username (${DEVELOPER_USERNAME}): " developer_username
			[[ ! -z "$developer_username" ]] && DEVELOPER_USERNAME=$developer_username || echo "Using '${DEVELOPER_USERNAME}'"


			read -ep "Developer First Name (${DEVELOPER_NAME}): " developer_name
			[[ ! -z "$developer_name" ]] && DEVELOPER_NAME=$developer_name || echo "Using '${DEVELOPER_NAME}'"


			read -ep "Developer Last Name (${DEVELOPER_LAST_NAME}): " developer_last_name
			[[ ! -z "$developer_last_name" ]] && DEVELOPER_LAST_NAME=$developer_last_name || echo "Using '${DEVELOPER_LAST_NAME}'"


			read -ep "Developer Website URL (${DEVELOPER_URL}): " developer_url
			[[ ! -z "$developer_url" ]] && DEVELOPER_URL=$developer_url || echo "Using '${DEVELOPER_URL}'"


		fi


	fi



fi




# Confirm the information
echo ""
echo ""
echo "== Information Entered ============"
echo ""
echo "Local development domain: $DOMAIN"
echo ""
echo "Project Name: $SLUG"
echo "Short Name: $PREFIX"

if [[ $MODE == install-starter ]]; then
	echo "Website Name: $NAME"
	echo "Website Tagline: $DESC"
	[[ ! -z "$plugins" ]] && echo "Plugins: $plugins" || echo "Plugins: $PLUGINS"
	echo ""

	if [[ $DEVELOPER_EMAIL != webdesign@twelve12.com ]]; then
		echo "Developer Email: $DEVELOPER_EMAIL"
		echo "Developer Username: $DEVELOPER_USERNAME"
		echo "Developer First Name: $DEVELOPER_NAME"
		echo "Developer Last Name: $DEVELOPER_LAST_NAME"
		echo "Developer URL: $DEVELOPER_URL"
		echo ""
	else
		echo "Developer Email: $DEVELOPER_EMAIL"
		echo ""
	fi

fi

echo ""
echo "==================================="
echo ""
echo ""
read -ep "Are these correct? (type 'yes' to confirm): " confirm




# CHANGE THE FILE IF YES
if [[ $confirm == yes ]] || [[ $confirm == y ]]; then


	# Move the 'wp-content' folder TEMPORARILY
	if [[ $MODE != install-starter ]]; then

		make_temporary

	fi


	# Update the project folder name
	if [[ -d ../wp-docker-builder/ ]]; then

		# Rename
		mv ../wp-docker-builder/ ../$SLUG
		cd ../$SLUG
		echo -e "Project folder renamed as '${SLUG}' ... ${GREEN}done${RESET}"

		# Update the basedir
		BASEDIR="$(pwd)"

	fi


	# Create the .env file from the template (local.env)
	rm -f .env
	cp local.env .env
	echo -e ".env file created ... ${GREEN}done${RESET}"


	# Update the .env file
	sedreplace "s/DOMAIN=dev.sitename.com/DOMAIN=$DOMAIN/g" .env;

	sedreplace "s/SLUG=site-name/SLUG=$SLUG/g" .env;
	sedreplace "s/Site Name/$NAME/g" .env;
	sedreplace "s/Site tagline/$DESC/g" .env;
	sedreplace "s/PREFIX=sitename/PREFIX=$PREFIX/g" .env;
	sedreplace "s/$DEFAULT_PLUGINS/$PLUGINS/g" .env;

	sedreplace "s/DEVELOPER_USERNAME=Username/DEVELOPER_USERNAME=$DEVELOPER_USERNAME/g" .env;
	sedreplace "s/DEVELOPER_NAME=Name/DEVELOPER_NAME=$DEVELOPER_NAME/g" .env;
	sedreplace "s/DEVELOPER_LAST_NAME=Lastname/DEVELOPER_LAST_NAME=$DEVELOPER_LAST_NAME/g" .env;
	sedreplace "s#DEVELOPER_EMAIL=name@company.com#DEVELOPER_EMAIL=$DEVELOPER_EMAIL#g" .env;
	sedreplace "s#DEVELOPER_URL=www.company.com#DEVELOPER_URL=$DEVELOPER_URL#g" .env;
	echo -e ".env file updated with the new info ... ${GREEN}done${RESET}"


	# Save the new .env file to the site folder
	rm -f site/.env
	cp .env site/.env
	echo -e ".env file copied to the 'site/' folder ... ${GREEN}done${RESET}"


	# Get data from the new .env file
	source .env


	# Permission fix of the project
	permission_update ./


else

	# If not confirmed, close the installation
	echo -e "${BLUE}NOT CONFIRMED${RESET}"
	exit

fi




# CHECK THE LOCAL DOMAIN AVAILABILITY
echo "Checking '${DOMAIN}' availability..."
if grep -q "${DOMAIN}" /etc/hosts; then
	echo -e "${RED}'${DOMAIN}' Host has already been added. Please remove it before installing.${RESET}"
	exit
fi
echo -e "${GREEN}${DOMAIN}${RESET} - AVAILABLE"




# CHECK IP AND CREATE HOST
echo "Checking IP availability..."
COUNTER=2
while [[ $COUNTER -lt 120 ]]; do

	IP="127.0.0.${COUNTER}"


	echo "Checking '${IP}' availability..."
	if grep -q "${IP}" /etc/hosts; then
		echo "${IP} - NOT AVAILABLE"
	else

		if curl --max-time 3 --output /dev/null --silent --head --fail "${IP}"; then
			echo -e "${RED}${IP}${RESET} - NOT AVAILABLE"
		else
			echo -e "${GREEN}${IP}${RESET} - AVAILABLE"
			break
		fi

	fi


	let COUNTER=COUNTER+1

done

# Update the environment file (.env) with the available IP
sedreplace "s/IP=127.0.0.1/IP=${IP}/g" .env;
echo -e "'${IP}' changed as '${IP}' on .env file ... ${GREEN}done${RESET}"


# Open that IP slot
ifconfig lo0 alias $IP up
echo -e "'${IP}' is now available to build server ... ${GREEN}done${RESET}"




# BUILD THE SERVER
echo "Server is building..."
docker-compose rm &&
docker-compose pull &&
docker-compose build --no-cache &&
docker-compose up -d --force-recreate


# Add the host to the /etc/hosts file
sudo bash config/etc-hosts.sh -add $DOMAIN $IP
killall -HUP mDNSResponder




# Check MySQL to be ready
wait_for_mysql




# Ask the registered URL and do the replacements
if [[ $MODE != install-starter ]]; then
	
	db_url_update

fi




# PREPARE THE STARTER TEMPLATE
if [[ $MODE == install-starter ]]; then


	# Download the template
	git clone https://github.com/Twelve12com/wp-flexible-starter-template.git site/wp/wp-content/themes/${SLUG}/
	rm -rf site/wp/wp-content/themes/${SLUG}/.git
	echo -e "Starter theme clonned ... ${GREEN}done${RESET}"


	# Update the permissions
	permission_update site/wp/wp-content/themes/${SLUG}/


	# Theme function prefix changes
	sedreplace "s/sitename/${PREFIX}/g" site/wp/wp-content/themes/${SLUG}/functions.php;
	sedreplace "s/sitename/${PREFIX}/g" site/wp/wp-content/themes/${SLUG}/header.php;
	echo -e "Function prefixes changed as '${PREFIX}_' ... ${GREEN}done${RESET}"


	# Theme info changes
	sedreplace "s/Site Name/${NAME}/g" site/wp/wp-content/themes/${SLUG}/style.scss;
	sedreplace "s/Site tagline/${DESC}/g" site/wp/wp-content/themes/${SLUG}/style.scss;
	echo -e "Theme information updated as '${NAME}' ... ${GREEN}done${RESET}"


	# Install NPM packages
	echo "NPM packages installing..."
	docker-compose run --no-deps --rm gulp npm run-script build
	echo -e "SCSS file built ... ${GREEN}done${RESET}"



	# DO THE WP WORKS
	source wp.sh


	# Save the initial DB backup
	db_backup


fi




# Update the temporary files
if [[ $MODE != install-starter ]]; then

	make_permanent

fi




# Ask for the git initialization
if [[ ! -d site/.git ]]; then


	read -ep "Would you like to create new this project to Git? (Press 'enter' or type 'no'): " gitconfirm
	if [[ $gitconfirm != no ]]; then


		# Save the initial DB backup
		db_backup


		# Initiate git
		(

			# Open the site directory
			cd site/
			echo -e "Open the site directory ... ${GREEN}done${RESET}"


			# Initiate Git
			git init
			echo -e "Initiate Git ... ${GREEN}done${RESET}"


			# Stage all the changes
			git add -A .
			echo -e "Stage all the changes ... ${GREEN}done${RESET}"


			# Show the git status
			git status
			echo -e "Show the git status ... ${GREEN}done${RESET}"


			# Commit the changes
			git commit -m "Initial commit"
			echo -e "Commit the changes ... ${GREEN}done${RESET}"


			echo 'Twelve12 Bitbucket Password:'
			read -s password  # -s flag hides password text

			read -ep "Would you like to retype the password? (Press 'enter' or type 'yes'): " retypepass
			if [[ $retypepass == "yes" ]]; then

				echo 'Twelve12 Bitbucket Password:'
				read -s password  # -s flag hides password text

			fi


			# Create a private repo
			curl POST -v -u twelve12com:$password  -H "Content-Type: application/json" \
		https://api.bitbucket.org/2.0/repositories/twelve12com/$SLUG \
		-d '{"scm": "git", "is_private": "true", "fork_policy": "no_public_forks" }'
			echo ""
			echo -e "Create a private repo ... ${GREEN}done${RESET}"


			# Add the origin
			git remote add origin https://twelve12com@bitbucket.org/twelve12com/$SLUG.git
			echo -e "Add the origin ... ${GREEN}done${RESET}"


			# Push the changes
			git push -u origin --all
			echo -e "Push the files ... ${GREEN}done${RESET}"


			# Update .git permissions
			permission_update .git
		)


	fi

fi




# Fix the site git permissions
if [[ -d site/.git ]]; then
	
	git_permission_update site/.git

fi




# Fix the builder git permissions finally
git_permission_update .git




# PRINT THE SITE INFO
echo -e "${GREEN}Project Installed${RESET}"
echo ""
echo ""
echo "== Site Info ===================="
echo ""
echo "Site URL: http://${DOMAIN}"
echo "Admin Page: http://${DOMAIN}/wp-admin"

if [[ $MODE == install-starter ]]; then

	echo "Username: ${ADMIN_USERNAME}"
	echo "${ADMIN_ONLY_PASSWORD}"

fi

echo "IP: ${IP}"
echo ""
echo "================================="
echo ""
echo ""